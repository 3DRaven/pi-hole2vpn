---
# tasks file for pi_hole_install
- name: Install Dnsmasq packages
  apt:
    name:
      - dnsmasq
      - ipset
    state: present
    update_cache: true
  tags: [pi_hole_install]

- name: Create docker compose and pi hole configuration directories
  file:
    path: /etc/docker/compose/pi-hole/etc-pihole
    state: directory
    mode: 0700
  become: true
  tags: [pi_hole_install]

- name: Create docker-compose config for pi-hole
  template:
    src: docker-compose.yml.j2
    dest: /etc/docker/compose/pi-hole/docker-compose.yml
    mode: 0600
  tags: [pi_hole_install]

# - name: Set local default DNS for preventing future errors 
#   lineinfile:
#     path: /etc/systemd/resolved.conf
#     regexp: '^#DNS='
#     line: "DNS={{ default_system_dns }}"
#   tags: [pi_hole_install]

- name: Replace DNSStubListener line in resolved.conf because systemd-resolved listen on 53 port (https://github.com/pi-hole/docker-pi-hole/tree/master)
  lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: '^#DNSStubListener=yes'
    line: 'DNSStubListener=no'
  tags: [pi_hole_install]

- name: Remove default resolve.conf file
  file:
    path: /etc/resolv.conf
    state: absent
  tags: [pi_hole_install]

- name: Create a symbolic link for real resolve.conf
  file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
  tags: [pi_hole_install]

- name: Restart systemd-resolved service for reloading settings
  service:
    name: systemd-resolved
    state: restarted
  tags: [pi_hole_install]

- name: Stop possible old pihole docker-compose started container
  community.docker.docker_compose:
    project_src: /etc/docker/compose/pi-hole
    state: absent
  tags: [pi_hole_install]

- name: Stop possible old pihole docker started container
  docker_container:
    name: pihole
    state: absent
    container_default_behavior: no_defaults
    force_kill: true
  tags: [pi_hole_install]

- name: Remove old password for pihole admin 
  lineinfile:
    path: /etc/systemd/resolved/etc/docker/compose/pi-hole/setupVars.conf
    regexp: '^WEBPASSWORD.*'
    state: absent
  tags: [pi_hole_install]

- name: Restart docker service for resolve problems with network configuration
  service:
    name: docker
    enabled: true
    state: restarted
  tags: [pi_hole_install]

- name: Start new pihole container
  community.docker.docker_compose:
    project_src: /etc/docker/compose/pi-hole
    state: present
    # restarted: true
    # debug: true
  tags: [pi_hole_install]

- name: Waiting pihole full up for front DNS server
  ansible.builtin.wait_for:
    port: 53
    host: "{{ vpn_net_base ~ '.0' }}.1"
  tags: [pi_hole_install]

- name: Create pi-hole FTL config
  template:
    src: pihole-FTL.j2.conf
    dest: /etc/docker/compose/pi-hole/etc-pihole/pihole-FTL.conf
    mode: 0600
  tags: [pi_hole_install]

- name: Restart pihole container for reloading FTL config
  community.docker.docker_compose:
    project_src: /etc/docker/compose/pi-hole
    state: present
    restarted: true
    # debug: true
  tags: [pi_hole_install]

- name: Create ipset for Dnsmasq to write allowed IPs
  command: ipset -exist create pihole hash:ip
  tags: [pi_hole_install]
  
- name: Backup old Dnsmasq config
  copy: 
    remote_src: True 
    src: /etc/dnsmasq.conf 
    dest: /etc/dnsmasq.conf.bak
    force: no #backup only system wide file
  tags: [pi_hole_install]

- name: Create dnsmasq config for host backend DNS
  template:
    src: dnsmasq.j2.conf
    dest: /etc/dnsmasq.conf
    mode: 0600
  tags: [pi_hole_install]

- name: Start and enable host Dnsmasq service
  service:
    name: dnsmasq
    state: restarted
    enabled: true
    daemon_reload: true
  tags: [pi_hole_install]

# - name: Add pi-hole as first system DNS
#   lineinfile:
#     path: /etc/resolv.conf
#     state: present
#     firstmatch: yes
#     insertbefore: '^nameserver.*' 
#     line: "nameserver {{ vpn_net_base ~ '.0.1' }}"
#   tags: [pi_hole_install]

- name: ACCEPT DNS requests from pihole in docker to host dnsmasq - TCP
  iptables:
    table: filter
    chain: INPUT
    protocol: tcp
    destination_port: 53
    in_interface: br-pihole
    jump: ACCEPT
  tags: [pi_hole_install]
  
- name: ACCEPT DNS requests from pihole in docker to host dnsmasq - UDP
  iptables:
    table: filter
    chain: INPUT
    protocol: udp
    destination_port: 53
    in_interface: br-pihole
    jump: ACCEPT
  tags: [pi_hole_install]

- name: Add DNAT redirect rule for DNS traffic by UDP for unknown p2p DNS requests
  iptables:
    table: nat
    chain: PREROUTING
    in_interface: "!br-pihole"
    protocol: udp
    state: present
    match: udp
    destination_port: 53
    destination: "!{{ vpn_net_base ~ '.' ~ 0 }}.0/16"
    jump: DNAT
    to_destination: "{{ vpn_net_base ~ '.' ~ 0 }}.1:53"
  tags: [pi_hole_install]

- name: Add DNAT redirect rule for DNS traffic by TCP for unknown p2p DNS requests
  iptables:
    table: nat
    chain: PREROUTING
    in_interface: "!br-pihole"
    protocol: tcp
    state: present
    match: tcp
    destination_port: 53
    destination: "!{{ vpn_net_base ~ '.' ~ 0 }}.0/16"
    jump: DNAT
    to_destination: "{{ vpn_net_base ~ '.' ~ 0 }}.1:53"
  tags: [pi_hole_install]

- name: Include variables from data.yml
  ansible.builtin.include_vars:
    file: data.yml
    name: data
  tags: [pi_hole_install]

- name: Split autoresolve list to groups
  set_fact:
    grouped_list: "{{ data.autoresolvelist | batch(10) | list | map('join', ' ') | list }}"
  tags: [pi_hole_install]

- name: Add to cron implicitly resolve IPs to grant p2p at reboot
  cron:
    name: "Implicitly resolve IPs to grant p2p at reboot {{ item_idx }}"
    backup: true
    job: "/usr/bin/dig @172.18.0.1 {{ item }}"
    special_time: reboot
  loop: "{{ grouped_list }}"
  loop_control:
    index_var: item_idx
  tags: [pi_hole_install]

- name: Add to cron implicitly resolve IPs to grant p2p periodicaly
  cron:
    name: "Implicitly resolve IPs to grant p2p periodicaly {{ item_idx }}"
    backup: false
    job: "/usr/bin/dig @172.18.0.1 {{ item }}"
    minute: "*/1"
  loop: "{{ grouped_list }}"
  loop_control:
    index_var: item_idx
  tags: [pi_hole_install]

- name: Split whitelist_wildcard to groups
  set_fact:
    grouped_list: "{{ data.whitelist_wildcard | batch(10) | list | map('join', ' ') | list }}"
  tags: [pi_hole_install]

- name: Fill pihole whitelist wildcard
  community.docker.docker_container_exec:
    container: pihole
    command: "pihole --white-wild {{ item }}"
  loop: "{{ grouped_list }}"
  tags: [pi_hole_install]

- name: Split whitelist_exactly to groups
  set_fact:
    grouped_list: "{{ data.whitelist_exactly | batch(10) | list | map('join', ' ') | list }}"
  tags: [pi_hole_install]

- name: Fill pihole whitelist exactly
  community.docker.docker_container_exec:
    container: pihole
    command: "pihole -w {{ item }}"
  loop: "{{ grouped_list }}"
  tags: [pi_hole_install]

- name: ACCEPT TCP DNS requests in the mangle table's PREROUTING chain for p2p hosts, as we will later redirect them to Pi-hole
  iptables:
    table: mangle
    chain: PREROUTING
    protocol: tcp
    destination_port: 53
    jump: ACCEPT
  tags: [pi_hole_install]

- name: ACCEPT UDP DNS requests in the mangle table's PREROUTING chain for p2p hosts, as we will later redirect them to Pi-hole
  iptables:
    table: mangle
    chain: PREROUTING
    protocol: udp
    destination_port: 53
    jump: ACCEPT
  tags: [pi_hole_install]

- name: Check old logging TCP p2p new connections rule exists
  command: 'iptables -t mangle -C PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -p tcp -m tcp ! --dport 53 -m set ! --match-set pihole dst -m conntrack --ctstate NEW -j LOG --log-prefix "p2p: "'
  register: checking_result
  changed_when: false
  failed_when: checking_result.rc != 0 and checking_result.rc != 1
  tags: [pi_hole_install]

- name: Add logging TCP p2p new connections rule if not exists
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -p tcp -m tcp ! --dport 53  -m set ! --match-set pihole dst -m conntrack --ctstate NEW -j LOG --log-prefix "p2p: "'
  changed_when: checking_result.rc == 1
  when: checking_result.rc == 1
  tags: [pi_hole_install]

- name: Check old logging UDP p2p new connections rule exists
  command: 'iptables -t mangle -C PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -p udp -m udp ! --dport 53 -m set ! --match-set pihole dst -m conntrack --ctstate NEW -j LOG --log-prefix "p2p: "'
  register: checking_result
  changed_when: false
  failed_when: checking_result.rc != 0 and checking_result.rc != 1
  tags: [pi_hole_install]

- name: Add logging UDP p2p new connections rule if not exists
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -p udp -m udp ! --dport 53  -m set ! --match-set pihole dst -m conntrack --ctstate NEW -j LOG --log-prefix "p2p: "'
  changed_when: checking_result.rc == 1 
  when: checking_result.rc == 1
  tags: [pi_hole_install]

- name: Check old DROP OUT TCP p2p connections rule exists
  command: 'iptables -t mangle -C PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p tcp -m multiport --dports {{ restricted_p2p_tcp_ports|join(",") }} -j DROP'
  register: checking_result
  changed_when: false
  failed_when: checking_result.rc != 0 and checking_result.rc != 1
  when: (restricted_p2p_tcp_ports | length > 0) and (allow_only_p2p_tcp_ports | length == 0)
  tags: [pi_hole_install]

- name: Add DROP OUT TCP p2p connections for ports {{ restricted_p2p_tcp_ports|join(',') }} (DoH as example)
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p tcp -m multiport --dports {{ restricted_p2p_tcp_ports|join(",") }} -j DROP'
  changed_when: checking_result.rc == 1
  when: ((restricted_p2p_tcp_ports | length > 0) and (allow_only_p2p_tcp_ports | length == 0)) and (checking_result.rc == 1)
  tags: [pi_hole_install]

- name: Check old DROP OUT UDP p2p connections rule exists
  command: 'iptables -t mangle -C PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p udp -m multiport --dports {{ restricted_p2p_udp_ports|join(",") }} -j DROP'
  register: checking_result
  changed_when: false
  failed_when: checking_result.rc != 0 and checking_result.rc != 1
  when: (restricted_p2p_udp_ports | length > 0) and (allow_only_p2p_udp_ports | length == 0)
  tags: [pi_hole_install]

- name: Add DROP OUT UDP p2p connections for ports {{ restricted_p2p_udp_ports|join(',') }}
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p udp -m multiport --dports {{ restricted_p2p_udp_ports|join(",") }} -j DROP'
  changed_when: checking_result.rc == 1
  when: ((restricted_p2p_udp_ports | length > 0) and (allow_only_p2p_udp_ports | length == 0)) and (checking_result.rc == 1)
  tags: [pi_hole_install]

- name: Check old allow only OUT TCP p2p connections rule exists
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p tcp -m multiport ! --dports {{ allow_only_p2p_tcp_ports|join(",") }} -j DROP'
  register: checking_result
  changed_when: false
  failed_when: checking_result.rc != 0 and checking_result.rc != 1
  when: allow_only_p2p_tcp_ports | length > 0
  tags: [pi_hole_install]

- name: Add allow only OUT TCP p2p connections for ports {{ allow_only_p2p_tcp_ports|join(',') }}
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p tcp -m multiport ! --dports {{ allow_only_p2p_tcp_ports|join(",") }} -j DROP'
  changed_when: checking_result.rc == 1
  when: (allow_only_p2p_tcp_ports | length > 0) and (checking_result.rc == 1)
  tags: [pi_hole_install]

- name: Check old allow only OUT UDP p2p connections rule exists
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p udp -m multiport ! --dports {{ allow_only_p2p_udp_ports|join(",") }} -j DROP'
  register: checking_result
  changed_when: false
  failed_when: checking_result.rc != 0 and checking_result.rc != 1
  when: allow_only_p2p_udp_ports | length > 0
  tags: [pi_hole_install]

- name: Add allow only OUT UDP p2p connections for ports {{ allow_only_p2p_udp_ports|join(',') }}
  command: 'iptables -t mangle -A PREROUTING -s {{ vpn_net_base ~ "." ~ 0 }}.0/16 ! -d {{ vpn_net_base ~ "." ~ 0 }}.0/16 -m set ! --match-set pihole dst -p udp -m multiport ! --dports {{ allow_only_p2p_udp_ports|join(",") }} -j DROP'
  changed_when: checking_result.rc == 1
  when: (allow_only_p2p_udp_ports | length > 0) and (checking_result.rc == 1)
  tags: [pi_hole_install]
